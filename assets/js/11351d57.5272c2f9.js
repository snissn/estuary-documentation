"use strict";(self.webpackChunkestuary_documentation=self.webpackChunkestuary_documentation||[]).push([[5668],{3905:(e,t,r)=>{r.d(t,{Zo:()=>o,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),u=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},o=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),d=u(r),m=n,g=d["".concat(p,".").concat(m)]||d[m]||k[m]||i;return r?a.createElement(g,l(l({ref:t},o),{},{components:r})):a.createElement(g,l({ref:t},o))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var u=2;u<i;u++)l[u]=r[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},62798:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));const i={},l="SwaggerClient::UserApi",s={unversionedId:"ruby/docs/UserApi",id:"ruby/docs/UserApi",title:"SwaggerClient::UserApi",description:"All URIs are relative to https://api.estuary.tech",source:"@site/clients/ruby/docs/UserApi.md",sourceDirName:"ruby/docs",slug:"/ruby/docs/UserApi",permalink:"/estuary-documentation/clients/ruby/docs/UserApi",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SwaggerClient::PublicApi",permalink:"/estuary-documentation/clients/ruby/docs/PublicApi"},next:{title:"SwaggerClient::UtilContentAddIpfsBody",permalink:"/estuary-documentation/clients/ruby/docs/UtilContentAddIpfsBody"}},p={},u=[{value:"Example",id:"example",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return type",id:"return-type",level:3},{value:"Authorization",id:"authorization",level:3},{value:"HTTP request headers",id:"http-request-headers",level:3},{value:"Example",id:"example-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Return type",id:"return-type-1",level:3},{value:"Authorization",id:"authorization-1",level:3},{value:"HTTP request headers",id:"http-request-headers-1",level:3},{value:"Example",id:"example-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Return type",id:"return-type-2",level:3},{value:"Authorization",id:"authorization-2",level:3},{value:"HTTP request headers",id:"http-request-headers-2",level:3},{value:"Example",id:"example-3",level:3},{value:"Parameters",id:"parameters-3",level:3},{value:"Return type",id:"return-type-3",level:3},{value:"Authorization",id:"authorization-3",level:3},{value:"HTTP request headers",id:"http-request-headers-3",level:3},{value:"Example",id:"example-4",level:3},{value:"Parameters",id:"parameters-4",level:3},{value:"Return type",id:"return-type-4",level:3},{value:"Authorization",id:"authorization-4",level:3},{value:"HTTP request headers",id:"http-request-headers-4",level:3}],o={toc:u};function k(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"swaggerclientuserapi"},"SwaggerClient::UserApi"),(0,n.kt)("p",null,"All URIs are relative to ",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://api.estuary.tech"},"https://api.estuary.tech"))),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Method"),(0,n.kt)("th",{parentName:"tr",align:null},"HTTP request"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/UserApi#user_api_keys_get"},(0,n.kt)("strong",{parentName:"a"},"user_api_keys_get"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"GET")," /user/api-keys"),(0,n.kt)("td",{parentName:"tr",align:null},"Get API keys for a user")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/UserApi#user_api_keys_key_delete"},(0,n.kt)("strong",{parentName:"a"},"user_api_keys_key_delete"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"DELETE")," /user/api-keys/{key}"),(0,n.kt)("td",{parentName:"tr",align:null},"Revoke a User API Key.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/UserApi#user_api_keys_post"},(0,n.kt)("strong",{parentName:"a"},"user_api_keys_post"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"POST")," /user/api-keys"),(0,n.kt)("td",{parentName:"tr",align:null},"Create API keys for a user")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/UserApi#user_export_get"},(0,n.kt)("strong",{parentName:"a"},"user_export_get"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"GET")," /user/export"),(0,n.kt)("td",{parentName:"tr",align:null},"Export user data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/UserApi#user_stats_get"},(0,n.kt)("strong",{parentName:"a"},"user_stats_get"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"GET")," /user/stats"),(0,n.kt)("td",{parentName:"tr",align:null},"Create API keys for a user")))),(0,n.kt)("h1",{id:"user_api_keys_get"},(0,n.kt)("strong",{parentName:"h1"},"user_api_keys_get")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Array","<","MainGetApiKeysResp",">"," user_api_keys_get")),(0,n.kt)("p",null,"Get API keys for a user"),(0,n.kt)("p",null,"This endpoint is used to get API keys for a user. In estuary, each user can be given multiple API keys (tokens). This endpoint can be used to retrieve all available API keys for a given user."),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::UserApi.new\n\nbegin\n  #Get API keys for a user\n  result = api_instance.user_api_keys_get\n  p result\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling UserApi->user_api_keys_get: #{e}\"\nend\n")),(0,n.kt)("h3",{id:"parameters"},"Parameters"),(0,n.kt)("p",null,"This endpoint does not need any parameter."),(0,n.kt)("h3",{id:"return-type"},"Return type"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/docs/MainGetApiKeysResp"},(0,n.kt)("strong",{parentName:"a"},"Array","<","MainGetApiKeysResp",">"))),(0,n.kt)("h3",{id:"authorization"},"Authorization"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,n.kt)("h3",{id:"http-request-headers"},"HTTP request headers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,n.kt)("h1",{id:"user_api_keys_key_delete"},(0,n.kt)("strong",{parentName:"h1"},"user_api_keys_key_delete")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"user_api_keys_key_delete(key)")),(0,n.kt)("p",null,"Revoke a User API Key."),(0,n.kt)("p",null,"This endpoint is used to revoke a user API key. In estuary, every user is assigned with an API key, this API key is generated and issued for each user and is primarily use to access all estuary features. This endpoint can be used to revoke the API key thats assigned to the user."),(0,n.kt)("h3",{id:"example-1"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::UserApi.new\n\nkey = 'key_example' # String | Key\n\n\nbegin\n  #Revoke a User API Key.\n  api_instance.user_api_keys_key_delete(key)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling UserApi->user_api_keys_key_delete: #{e}\"\nend\n")),(0,n.kt)("h3",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"key")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"String")),(0,n.kt)("td",{parentName:"tr",align:null},"Key"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h3",{id:"return-type-1"},"Return type"),(0,n.kt)("p",null,"nil (empty response body)"),(0,n.kt)("h3",{id:"authorization-1"},"Authorization"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,n.kt)("h3",{id:"http-request-headers-1"},"HTTP request headers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,n.kt)("h1",{id:"user_api_keys_post"},(0,n.kt)("strong",{parentName:"h1"},"user_api_keys_post")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"MainGetApiKeysResp user_api_keys_post(opts)")),(0,n.kt)("p",null,"Create API keys for a user"),(0,n.kt)("p",null,"This endpoint is used to create API keys for a user. In estuary, each user is given an API key to access all features."),(0,n.kt)("h3",{id:"example-2"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::UserApi.new\n\nopts = { \n  expiry: 'expiry_example', # String | Expiration - Expiration - Valid time units are ns, us (or \xb5s), ms, s, m, h. for example 300h\n  perms: 'perms_example' # String | Permissions -- currently unused\n}\n\nbegin\n  #Create API keys for a user\n  result = api_instance.user_api_keys_post(opts)\n  p result\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling UserApi->user_api_keys_post: #{e}\"\nend\n")),(0,n.kt)("h3",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"expiry")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"String")),(0,n.kt)("td",{parentName:"tr",align:null},"Expiration - Expiration - Valid time units are ns, us (or \xb5s), ms, s, m, h. for example 300h"),(0,n.kt)("td",{parentName:"tr",align:null},"[optional]")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"perms")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"String")),(0,n.kt)("td",{parentName:"tr",align:null},"Permissions -- currently unused"),(0,n.kt)("td",{parentName:"tr",align:null},"[optional]")))),(0,n.kt)("h3",{id:"return-type-2"},"Return type"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/docs/MainGetApiKeysResp"},(0,n.kt)("strong",{parentName:"a"},"MainGetApiKeysResp"))),(0,n.kt)("h3",{id:"authorization-2"},"Authorization"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,n.kt)("h3",{id:"http-request-headers-2"},"HTTP request headers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,n.kt)("h1",{id:"user_export_get"},(0,n.kt)("strong",{parentName:"h1"},"user_export_get")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"String user_export_get")),(0,n.kt)("p",null,"Export user data"),(0,n.kt)("p",null,"This endpoint is used to get API keys for a user."),(0,n.kt)("h3",{id:"example-3"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::UserApi.new\n\nbegin\n  #Export user data\n  result = api_instance.user_export_get\n  p result\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling UserApi->user_export_get: #{e}\"\nend\n")),(0,n.kt)("h3",{id:"parameters-3"},"Parameters"),(0,n.kt)("p",null,"This endpoint does not need any parameter."),(0,n.kt)("h3",{id:"return-type-3"},"Return type"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"String")),(0,n.kt)("h3",{id:"authorization-3"},"Authorization"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,n.kt)("h3",{id:"http-request-headers-3"},"HTTP request headers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,n.kt)("h1",{id:"user_stats_get"},(0,n.kt)("strong",{parentName:"h1"},"user_stats_get")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"MainUserStatsResponse user_stats_get")),(0,n.kt)("p",null,"Create API keys for a user"),(0,n.kt)("p",null,"This endpoint is used to create API keys for a user."),(0,n.kt)("h3",{id:"example-4"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::UserApi.new\n\nbegin\n  #Create API keys for a user\n  result = api_instance.user_stats_get\n  p result\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling UserApi->user_stats_get: #{e}\"\nend\n")),(0,n.kt)("h3",{id:"parameters-4"},"Parameters"),(0,n.kt)("p",null,"This endpoint does not need any parameter."),(0,n.kt)("h3",{id:"return-type-4"},"Return type"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/docs/MainUserStatsResponse"},(0,n.kt)("strong",{parentName:"a"},"MainUserStatsResponse"))),(0,n.kt)("h3",{id:"authorization-4"},"Authorization"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,n.kt)("h3",{id:"http-request-headers-4"},"HTTP request headers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Accept"),": application/json")))}k.isMDXComponent=!0}}]);