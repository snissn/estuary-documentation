"use strict";(self.webpackChunkestuary_documentation=self.webpackChunkestuary_documentation||[]).push([[3128],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(n),k=r,c=m["".concat(o,".").concat(k)]||m[k]||d[k]||i;return n?a.createElement(c,p(p({ref:t},s),{},{components:n})):a.createElement(c,p({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,p[1]=l;for(var u=2;u<i;u++)p[u]=n[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={},p="WWW::SwaggerClient::PeeringApi",l={unversionedId:"perl/docs/PeeringApi",id:"perl/docs/PeeringApi",title:"WWW::SwaggerClient::PeeringApi",description:"Load the API package",source:"@site/clients/perl/docs/PeeringApi.md",sourceDirName:"perl/docs",slug:"/perl/docs/PeeringApi",permalink:"/estuary-documentation/clients/perl/docs/PeeringApi",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WWW::SwaggerClient::NetApi",permalink:"/estuary-documentation/clients/perl/docs/NetApi"},next:{title:"WWW::SwaggerClient::PeersApi",permalink:"/estuary-documentation/clients/perl/docs/PeersApi"}},o={},u=[{value:"Load the API package",id:"load-the-api-package",level:2},{value:"Example",id:"example",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return type",id:"return-type",level:3},{value:"Authorization",id:"authorization",level:3},{value:"HTTP request headers",id:"http-request-headers",level:3},{value:"Example",id:"example-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Return type",id:"return-type-1",level:3},{value:"Authorization",id:"authorization-1",level:3},{value:"HTTP request headers",id:"http-request-headers-1",level:3},{value:"Example",id:"example-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Return type",id:"return-type-2",level:3},{value:"Authorization",id:"authorization-2",level:3},{value:"HTTP request headers",id:"http-request-headers-2",level:3},{value:"Example",id:"example-3",level:3},{value:"Parameters",id:"parameters-3",level:3},{value:"Return type",id:"return-type-3",level:3},{value:"Authorization",id:"authorization-3",level:3},{value:"HTTP request headers",id:"http-request-headers-3",level:3},{value:"Example",id:"example-4",level:3},{value:"Parameters",id:"parameters-4",level:3},{value:"Return type",id:"return-type-4",level:3},{value:"Authorization",id:"authorization-4",level:3},{value:"HTTP request headers",id:"http-request-headers-4",level:3},{value:"Example",id:"example-5",level:3},{value:"Parameters",id:"parameters-5",level:3},{value:"Return type",id:"return-type-5",level:3},{value:"Authorization",id:"authorization-5",level:3},{value:"HTTP request headers",id:"http-request-headers-5",level:3}],s={toc:u};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wwwswaggerclientpeeringapi"},"WWW::SwaggerClient::PeeringApi"),(0,r.kt)("h2",{id:"load-the-api-package"},"Load the API package"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use WWW::SwaggerClient::Object::PeeringApi;\n")),(0,r.kt)("p",null,"All URIs are relative to ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://api.estuary.tech"},"https://api.estuary.tech"))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"HTTP request"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/perl/docs/PeeringApi#admin_peering_peers_delete"},(0,r.kt)("strong",{parentName:"a"},"admin_peering_peers_delete"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"DELETE")," /admin/peering/peers"),(0,r.kt)("td",{parentName:"tr",align:null},"Remove peers on Peering Service")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/perl/docs/PeeringApi#admin_peering_peers_get"},(0,r.kt)("strong",{parentName:"a"},"admin_peering_peers_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /admin/peering/peers"),(0,r.kt)("td",{parentName:"tr",align:null},"List all Peering peers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/perl/docs/PeeringApi#admin_peering_peers_post"},(0,r.kt)("strong",{parentName:"a"},"admin_peering_peers_post"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"POST")," /admin/peering/peers"),(0,r.kt)("td",{parentName:"tr",align:null},"Add peers on Peering Service")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/perl/docs/PeeringApi#admin_peering_start_post"},(0,r.kt)("strong",{parentName:"a"},"admin_peering_start_post"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"POST")," /admin/peering/start"),(0,r.kt)("td",{parentName:"tr",align:null},"Start Peering")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/perl/docs/PeeringApi#admin_peering_status_get"},(0,r.kt)("strong",{parentName:"a"},"admin_peering_status_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /admin/peering/status"),(0,r.kt)("td",{parentName:"tr",align:null},"Check Peering Status")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/perl/docs/PeeringApi#admin_peering_stop_post"},(0,r.kt)("strong",{parentName:"a"},"admin_peering_stop_post"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"POST")," /admin/peering/stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Stop Peering")))),(0,r.kt)("h1",{id:"admin_peering_peers_delete"},(0,r.kt)("strong",{parentName:"h1"},"admin_peering_peers_delete")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"admin_peering_peers_delete(body => $body)")),(0,r.kt)("p",null,"Remove peers on Peering Service"),(0,r.kt)("p",null,"This endpoint can be used to remove a Peer from the Peering Service"),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Data::Dumper;\nuse WWW::SwaggerClient::PeeringApi;\nmy $api_instance = WWW::SwaggerClient::PeeringApi->new(\n\n    # Configure API key authorization: bearerAuth\n    api_key => {'Authorization' => 'YOUR_API_KEY'},\n    # uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n    #api_key_prefix => {'Authorization' => 'Bearer'},\n);\n\nmy $body = [WWW::SwaggerClient::Object::ARRAY[string]->new()]; # ARRAY[string] | Peer ids\n\neval { \n    $api_instance->admin_peering_peers_delete(body => $body);\n};\nif ($@) {\n    warn \"Exception when calling PeeringApi->admin_peering_peers_delete: $@\\n\";\n}\n")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"body")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"ARRAY","[string]")),(0,r.kt)("td",{parentName:"tr",align:null},"Peer ids"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type"},"Return type"),(0,r.kt)("p",null,"void (empty response body)"),(0,r.kt)("h3",{id:"authorization"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#"},"[Back to top]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-api-endpoints"},"[Back to API list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-models"},"[Back to Model list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/"},"[Back to README]")),(0,r.kt)("h1",{id:"admin_peering_peers_get"},(0,r.kt)("strong",{parentName:"h1"},"admin_peering_peers_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"admin_peering_peers_get()")),(0,r.kt)("p",null,"List all Peering peers"),(0,r.kt)("p",null,"This endpoint can be used to list all peers on Peering Service"),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Data::Dumper;\nuse WWW::SwaggerClient::PeeringApi;\nmy $api_instance = WWW::SwaggerClient::PeeringApi->new(\n\n    # Configure API key authorization: bearerAuth\n    api_key => {'Authorization' => 'YOUR_API_KEY'},\n    # uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n    #api_key_prefix => {'Authorization' => 'Bearer'},\n);\n\n\neval { \n    $api_instance->admin_peering_peers_get();\n};\nif ($@) {\n    warn \"Exception when calling PeeringApi->admin_peering_peers_get: $@\\n\";\n}\n")),(0,r.kt)("h3",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,"This endpoint does not need any parameter."),(0,r.kt)("h3",{id:"return-type-1"},"Return type"),(0,r.kt)("p",null,"void (empty response body)"),(0,r.kt)("h3",{id:"authorization-1"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-1"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#"},"[Back to top]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-api-endpoints"},"[Back to API list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-models"},"[Back to Model list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/"},"[Back to README]")),(0,r.kt)("h1",{id:"admin_peering_peers_post"},(0,r.kt)("strong",{parentName:"h1"},"admin_peering_peers_post")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"admin_peering_peers_post()")),(0,r.kt)("p",null,"Add peers on Peering Service"),(0,r.kt)("p",null,"This endpoint can be used to add a Peer from the Peering Service"),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Data::Dumper;\nuse WWW::SwaggerClient::PeeringApi;\nmy $api_instance = WWW::SwaggerClient::PeeringApi->new(\n\n    # Configure API key authorization: bearerAuth\n    api_key => {'Authorization' => 'YOUR_API_KEY'},\n    # uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n    #api_key_prefix => {'Authorization' => 'Bearer'},\n);\n\n\neval { \n    $api_instance->admin_peering_peers_post();\n};\nif ($@) {\n    warn \"Exception when calling PeeringApi->admin_peering_peers_post: $@\\n\";\n}\n")),(0,r.kt)("h3",{id:"parameters-2"},"Parameters"),(0,r.kt)("p",null,"This endpoint does not need any parameter."),(0,r.kt)("h3",{id:"return-type-2"},"Return type"),(0,r.kt)("p",null,"void (empty response body)"),(0,r.kt)("h3",{id:"authorization-2"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-2"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#"},"[Back to top]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-api-endpoints"},"[Back to API list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-models"},"[Back to Model list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/"},"[Back to README]")),(0,r.kt)("h1",{id:"admin_peering_start_post"},(0,r.kt)("strong",{parentName:"h1"},"admin_peering_start_post")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"admin_peering_start_post()")),(0,r.kt)("p",null,"Start Peering"),(0,r.kt)("p",null,"This endpoint can be used to start the Peering Service"),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Data::Dumper;\nuse WWW::SwaggerClient::PeeringApi;\nmy $api_instance = WWW::SwaggerClient::PeeringApi->new(\n\n    # Configure API key authorization: bearerAuth\n    api_key => {'Authorization' => 'YOUR_API_KEY'},\n    # uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n    #api_key_prefix => {'Authorization' => 'Bearer'},\n);\n\n\neval { \n    $api_instance->admin_peering_start_post();\n};\nif ($@) {\n    warn \"Exception when calling PeeringApi->admin_peering_start_post: $@\\n\";\n}\n")),(0,r.kt)("h3",{id:"parameters-3"},"Parameters"),(0,r.kt)("p",null,"This endpoint does not need any parameter."),(0,r.kt)("h3",{id:"return-type-3"},"Return type"),(0,r.kt)("p",null,"void (empty response body)"),(0,r.kt)("h3",{id:"authorization-3"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-3"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#"},"[Back to top]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-api-endpoints"},"[Back to API list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-models"},"[Back to Model list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/"},"[Back to README]")),(0,r.kt)("h1",{id:"admin_peering_status_get"},(0,r.kt)("strong",{parentName:"h1"},"admin_peering_status_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"admin_peering_status_get()")),(0,r.kt)("p",null,"Check Peering Status"),(0,r.kt)("p",null,"This endpoint can be used to check the Peering status"),(0,r.kt)("h3",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Data::Dumper;\nuse WWW::SwaggerClient::PeeringApi;\nmy $api_instance = WWW::SwaggerClient::PeeringApi->new(\n\n    # Configure API key authorization: bearerAuth\n    api_key => {'Authorization' => 'YOUR_API_KEY'},\n    # uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n    #api_key_prefix => {'Authorization' => 'Bearer'},\n);\n\n\neval { \n    $api_instance->admin_peering_status_get();\n};\nif ($@) {\n    warn \"Exception when calling PeeringApi->admin_peering_status_get: $@\\n\";\n}\n")),(0,r.kt)("h3",{id:"parameters-4"},"Parameters"),(0,r.kt)("p",null,"This endpoint does not need any parameter."),(0,r.kt)("h3",{id:"return-type-4"},"Return type"),(0,r.kt)("p",null,"void (empty response body)"),(0,r.kt)("h3",{id:"authorization-4"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-4"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#"},"[Back to top]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-api-endpoints"},"[Back to API list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-models"},"[Back to Model list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/"},"[Back to README]")),(0,r.kt)("h1",{id:"admin_peering_stop_post"},(0,r.kt)("strong",{parentName:"h1"},"admin_peering_stop_post")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"admin_peering_stop_post()")),(0,r.kt)("p",null,"Stop Peering"),(0,r.kt)("p",null,"This endpoint can be used to stop the Peering Service"),(0,r.kt)("h3",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Data::Dumper;\nuse WWW::SwaggerClient::PeeringApi;\nmy $api_instance = WWW::SwaggerClient::PeeringApi->new(\n\n    # Configure API key authorization: bearerAuth\n    api_key => {'Authorization' => 'YOUR_API_KEY'},\n    # uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n    #api_key_prefix => {'Authorization' => 'Bearer'},\n);\n\n\neval { \n    $api_instance->admin_peering_stop_post();\n};\nif ($@) {\n    warn \"Exception when calling PeeringApi->admin_peering_stop_post: $@\\n\";\n}\n")),(0,r.kt)("h3",{id:"parameters-5"},"Parameters"),(0,r.kt)("p",null,"This endpoint does not need any parameter."),(0,r.kt)("h3",{id:"return-type-5"},"Return type"),(0,r.kt)("p",null,"void (empty response body)"),(0,r.kt)("h3",{id:"authorization-5"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-5"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#"},"[Back to top]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-api-endpoints"},"[Back to API list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/#documentation-for-models"},"[Back to Model list]")," ",(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/perl/"},"[Back to README]")))}d.isMDXComponent=!0}}]);