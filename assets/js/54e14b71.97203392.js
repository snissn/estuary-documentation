"use strict";(self.webpackChunkestuary_documentation=self.webpackChunkestuary_documentation||[]).push([[3166],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=u(n),g=a,k=m["".concat(o,".").concat(g)]||m[g]||d[g]||i;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94485:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const i={},l="SwaggerClient::AdminApi",p={unversionedId:"ruby/docs/AdminApi",id:"ruby/docs/AdminApi",title:"SwaggerClient::AdminApi",description:"All URIs are relative to https://api.estuary.tech",source:"@site/clients/ruby/docs/AdminApi.md",sourceDirName:"ruby/docs",slug:"/ruby/docs/AdminApi",permalink:"/estuary-documentation/clients/ruby/docs/AdminApi",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"swagger_client",permalink:"/estuary-documentation/clients/ruby/"},next:{title:"SwaggerClient::AutoretrieveApi",permalink:"/estuary-documentation/clients/ruby/docs/AutoretrieveApi"}},o={},u=[{value:"Example",id:"example",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return type",id:"return-type",level:3},{value:"Authorization",id:"authorization",level:3},{value:"HTTP request headers",id:"http-request-headers",level:3},{value:"Example",id:"example-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Return type",id:"return-type-1",level:3},{value:"Authorization",id:"authorization-1",level:3},{value:"HTTP request headers",id:"http-request-headers-1",level:3},{value:"Example",id:"example-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Return type",id:"return-type-2",level:3},{value:"Authorization",id:"authorization-2",level:3},{value:"HTTP request headers",id:"http-request-headers-2",level:3},{value:"Example",id:"example-3",level:3},{value:"Parameters",id:"parameters-3",level:3},{value:"Return type",id:"return-type-3",level:3},{value:"Authorization",id:"authorization-3",level:3},{value:"HTTP request headers",id:"http-request-headers-3",level:3},{value:"Example",id:"example-4",level:3},{value:"Parameters",id:"parameters-4",level:3},{value:"Return type",id:"return-type-4",level:3},{value:"Authorization",id:"authorization-4",level:3},{value:"HTTP request headers",id:"http-request-headers-4",level:3},{value:"Example",id:"example-5",level:3},{value:"Parameters",id:"parameters-5",level:3},{value:"Return type",id:"return-type-5",level:3},{value:"Authorization",id:"authorization-5",level:3},{value:"HTTP request headers",id:"http-request-headers-5",level:3},{value:"Example",id:"example-6",level:3},{value:"Parameters",id:"parameters-6",level:3},{value:"Return type",id:"return-type-6",level:3},{value:"Authorization",id:"authorization-6",level:3},{value:"HTTP request headers",id:"http-request-headers-6",level:3},{value:"Example",id:"example-7",level:3},{value:"Parameters",id:"parameters-7",level:3},{value:"Return type",id:"return-type-7",level:3},{value:"Authorization",id:"authorization-7",level:3},{value:"HTTP request headers",id:"http-request-headers-7",level:3}],s={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"swaggerclientadminapi"},"SwaggerClient::AdminApi"),(0,a.kt)("p",null,"All URIs are relative to ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://api.estuary.tech"},"https://api.estuary.tech"))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"HTTP request"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/AdminApi#admin_peering_peers_delete"},(0,a.kt)("strong",{parentName:"a"},"admin_peering_peers_delete"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"DELETE")," /admin/peering/peers"),(0,a.kt)("td",{parentName:"tr",align:null},"Remove peers on Peering Service")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/AdminApi#admin_peering_peers_get"},(0,a.kt)("strong",{parentName:"a"},"admin_peering_peers_get"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"GET")," /admin/peering/peers"),(0,a.kt)("td",{parentName:"tr",align:null},"List all Peering peers")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/AdminApi#admin_peering_peers_post"},(0,a.kt)("strong",{parentName:"a"},"admin_peering_peers_post"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"POST")," /admin/peering/peers"),(0,a.kt)("td",{parentName:"tr",align:null},"Add peers on Peering Service")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/AdminApi#admin_peering_start_post"},(0,a.kt)("strong",{parentName:"a"},"admin_peering_start_post"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"POST")," /admin/peering/start"),(0,a.kt)("td",{parentName:"tr",align:null},"Start Peering")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/AdminApi#admin_peering_status_get"},(0,a.kt)("strong",{parentName:"a"},"admin_peering_status_get"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"GET")," /admin/peering/status"),(0,a.kt)("td",{parentName:"tr",align:null},"Check Peering Status")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/AdminApi#admin_peering_stop_post"},(0,a.kt)("strong",{parentName:"a"},"admin_peering_stop_post"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"POST")," /admin/peering/stop"),(0,a.kt)("td",{parentName:"tr",align:null},"Stop Peering")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/AdminApi#admin_system_config_get"},(0,a.kt)("strong",{parentName:"a"},"admin_system_config_get"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"GET")," /admin/system/config"),(0,a.kt)("td",{parentName:"tr",align:null},"Get systems(estuary/shuttle) config")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/AdminApi#admin_users_get"},(0,a.kt)("strong",{parentName:"a"},"admin_users_get"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"GET")," /admin/users"),(0,a.kt)("td",{parentName:"tr",align:null},"Get all users")))),(0,a.kt)("h1",{id:"admin_peering_peers_delete"},(0,a.kt)("strong",{parentName:"h1"},"admin_peering_peers_delete")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"admin_peering_peers_delete(body)")),(0,a.kt)("p",null,"Remove peers on Peering Service"),(0,a.kt)("p",null,"This endpoint can be used to remove a Peer from the Peering Service"),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::AdminApi.new\n\nbody = [SwaggerClient::Array<String>.new] # Array<String> | Peer ids\n\n\nbegin\n  #Remove peers on Peering Service\n  api_instance.admin_peering_peers_delete(body)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling AdminApi->admin_peering_peers_delete: #{e}\"\nend\n")),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"body")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Array","<","String",">")),(0,a.kt)("td",{parentName:"tr",align:null},"Peer ids"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h3",{id:"return-type"},"Return type"),(0,a.kt)("p",null,"nil (empty response body)"),(0,a.kt)("h3",{id:"authorization"},"Authorization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,a.kt)("h3",{id:"http-request-headers"},"HTTP request headers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,a.kt)("h1",{id:"admin_peering_peers_get"},(0,a.kt)("strong",{parentName:"h1"},"admin_peering_peers_get")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"admin_peering_peers_get")),(0,a.kt)("p",null,"List all Peering peers"),(0,a.kt)("p",null,"This endpoint can be used to list all peers on Peering Service"),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::AdminApi.new\n\nbegin\n  #List all Peering peers\n  api_instance.admin_peering_peers_get\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling AdminApi->admin_peering_peers_get: #{e}\"\nend\n")),(0,a.kt)("h3",{id:"parameters-1"},"Parameters"),(0,a.kt)("p",null,"This endpoint does not need any parameter."),(0,a.kt)("h3",{id:"return-type-1"},"Return type"),(0,a.kt)("p",null,"nil (empty response body)"),(0,a.kt)("h3",{id:"authorization-1"},"Authorization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,a.kt)("h3",{id:"http-request-headers-1"},"HTTP request headers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,a.kt)("h1",{id:"admin_peering_peers_post"},(0,a.kt)("strong",{parentName:"h1"},"admin_peering_peers_post")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"admin_peering_peers_post")),(0,a.kt)("p",null,"Add peers on Peering Service"),(0,a.kt)("p",null,"This endpoint can be used to add a Peer from the Peering Service"),(0,a.kt)("h3",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::AdminApi.new\n\nbegin\n  #Add peers on Peering Service\n  api_instance.admin_peering_peers_post\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling AdminApi->admin_peering_peers_post: #{e}\"\nend\n")),(0,a.kt)("h3",{id:"parameters-2"},"Parameters"),(0,a.kt)("p",null,"This endpoint does not need any parameter."),(0,a.kt)("h3",{id:"return-type-2"},"Return type"),(0,a.kt)("p",null,"nil (empty response body)"),(0,a.kt)("h3",{id:"authorization-2"},"Authorization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,a.kt)("h3",{id:"http-request-headers-2"},"HTTP request headers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,a.kt)("h1",{id:"admin_peering_start_post"},(0,a.kt)("strong",{parentName:"h1"},"admin_peering_start_post")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"admin_peering_start_post")),(0,a.kt)("p",null,"Start Peering"),(0,a.kt)("p",null,"This endpoint can be used to start the Peering Service"),(0,a.kt)("h3",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::AdminApi.new\n\nbegin\n  #Start Peering\n  api_instance.admin_peering_start_post\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling AdminApi->admin_peering_start_post: #{e}\"\nend\n")),(0,a.kt)("h3",{id:"parameters-3"},"Parameters"),(0,a.kt)("p",null,"This endpoint does not need any parameter."),(0,a.kt)("h3",{id:"return-type-3"},"Return type"),(0,a.kt)("p",null,"nil (empty response body)"),(0,a.kt)("h3",{id:"authorization-3"},"Authorization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,a.kt)("h3",{id:"http-request-headers-3"},"HTTP request headers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,a.kt)("h1",{id:"admin_peering_status_get"},(0,a.kt)("strong",{parentName:"h1"},"admin_peering_status_get")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"admin_peering_status_get")),(0,a.kt)("p",null,"Check Peering Status"),(0,a.kt)("p",null,"This endpoint can be used to check the Peering status"),(0,a.kt)("h3",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::AdminApi.new\n\nbegin\n  #Check Peering Status\n  api_instance.admin_peering_status_get\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling AdminApi->admin_peering_status_get: #{e}\"\nend\n")),(0,a.kt)("h3",{id:"parameters-4"},"Parameters"),(0,a.kt)("p",null,"This endpoint does not need any parameter."),(0,a.kt)("h3",{id:"return-type-4"},"Return type"),(0,a.kt)("p",null,"nil (empty response body)"),(0,a.kt)("h3",{id:"authorization-4"},"Authorization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,a.kt)("h3",{id:"http-request-headers-4"},"HTTP request headers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,a.kt)("h1",{id:"admin_peering_stop_post"},(0,a.kt)("strong",{parentName:"h1"},"admin_peering_stop_post")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"admin_peering_stop_post")),(0,a.kt)("p",null,"Stop Peering"),(0,a.kt)("p",null,"This endpoint can be used to stop the Peering Service"),(0,a.kt)("h3",{id:"example-5"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::AdminApi.new\n\nbegin\n  #Stop Peering\n  api_instance.admin_peering_stop_post\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling AdminApi->admin_peering_stop_post: #{e}\"\nend\n")),(0,a.kt)("h3",{id:"parameters-5"},"Parameters"),(0,a.kt)("p",null,"This endpoint does not need any parameter."),(0,a.kt)("h3",{id:"return-type-5"},"Return type"),(0,a.kt)("p",null,"nil (empty response body)"),(0,a.kt)("h3",{id:"authorization-5"},"Authorization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,a.kt)("h3",{id:"http-request-headers-5"},"HTTP request headers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,a.kt)("h1",{id:"admin_system_config_get"},(0,a.kt)("strong",{parentName:"h1"},"admin_system_config_get")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"admin_system_config_get")),(0,a.kt)("p",null,"Get systems(estuary/shuttle) config"),(0,a.kt)("p",null,"This endpoint is used to get system configs."),(0,a.kt)("h3",{id:"example-6"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::AdminApi.new\n\nbegin\n  #Get systems(estuary/shuttle) config\n  api_instance.admin_system_config_get\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling AdminApi->admin_system_config_get: #{e}\"\nend\n")),(0,a.kt)("h3",{id:"parameters-6"},"Parameters"),(0,a.kt)("p",null,"This endpoint does not need any parameter."),(0,a.kt)("h3",{id:"return-type-6"},"Return type"),(0,a.kt)("p",null,"nil (empty response body)"),(0,a.kt)("h3",{id:"authorization-6"},"Authorization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,a.kt)("h3",{id:"http-request-headers-6"},"HTTP request headers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,a.kt)("h1",{id:"admin_users_get"},(0,a.kt)("strong",{parentName:"h1"},"admin_users_get")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"admin_users_get")),(0,a.kt)("p",null,"Get all users"),(0,a.kt)("p",null,"This endpoint is used to get all users."),(0,a.kt)("h3",{id:"example-7"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::AdminApi.new\n\nbegin\n  #Get all users\n  api_instance.admin_users_get\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling AdminApi->admin_users_get: #{e}\"\nend\n")),(0,a.kt)("h3",{id:"parameters-7"},"Parameters"),(0,a.kt)("p",null,"This endpoint does not need any parameter."),(0,a.kt)("h3",{id:"return-type-7"},"Return type"),(0,a.kt)("p",null,"nil (empty response body)"),(0,a.kt)("h3",{id:"authorization-7"},"Authorization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,a.kt)("h3",{id:"http-request-headers-7"},"HTTP request headers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Accept"),": application/json")))}d.isMDXComponent=!0}}]);