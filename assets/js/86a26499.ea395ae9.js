"use strict";(self.webpackChunkestuary_documentation=self.webpackChunkestuary_documentation||[]).push([[5042],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),u=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=u(t.components);return a.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),g=u(n),m=r,k=g["".concat(p,".").concat(m)]||g[m]||s[m]||l;return n?a.createElement(k,i(i({ref:e},d),{},{components:n})):a.createElement(k,i({ref:e},d))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=g;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},38617:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const l={},i="SwaggerClient::ContentApi",o={unversionedId:"ruby/docs/ContentApi",id:"ruby/docs/ContentApi",title:"SwaggerClient::ContentApi",description:"All URIs are relative to https://api.estuary.tech",source:"@site/clients/ruby/docs/ContentApi.md",sourceDirName:"ruby/docs",slug:"/ruby/docs/ContentApi",permalink:"/estuary-documentation/clients/ruby/docs/ContentApi",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SwaggerClient::CollectionsCollection",permalink:"/estuary-documentation/clients/ruby/docs/CollectionsCollection"},next:{title:"SwaggerClient::DealsApi",permalink:"/estuary-documentation/clients/ruby/docs/DealsApi"}},p={},u=[{value:"Example",id:"example",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return type",id:"return-type",level:3},{value:"Authorization",id:"authorization",level:3},{value:"HTTP request headers",id:"http-request-headers",level:3},{value:"Example",id:"example-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Return type",id:"return-type-1",level:3},{value:"Authorization",id:"authorization-1",level:3},{value:"HTTP request headers",id:"http-request-headers-1",level:3},{value:"Example",id:"example-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Return type",id:"return-type-2",level:3},{value:"Authorization",id:"authorization-2",level:3},{value:"HTTP request headers",id:"http-request-headers-2",level:3},{value:"Example",id:"example-3",level:3},{value:"Parameters",id:"parameters-3",level:3},{value:"Return type",id:"return-type-3",level:3},{value:"Authorization",id:"authorization-3",level:3},{value:"HTTP request headers",id:"http-request-headers-3",level:3},{value:"Example",id:"example-4",level:3},{value:"Parameters",id:"parameters-4",level:3},{value:"Return type",id:"return-type-4",level:3},{value:"Authorization",id:"authorization-4",level:3},{value:"HTTP request headers",id:"http-request-headers-4",level:3},{value:"Example",id:"example-5",level:3},{value:"Parameters",id:"parameters-5",level:3},{value:"Return type",id:"return-type-5",level:3},{value:"Authorization",id:"authorization-5",level:3},{value:"HTTP request headers",id:"http-request-headers-5",level:3},{value:"Example",id:"example-6",level:3},{value:"Parameters",id:"parameters-6",level:3},{value:"Return type",id:"return-type-6",level:3},{value:"Authorization",id:"authorization-6",level:3},{value:"HTTP request headers",id:"http-request-headers-6",level:3},{value:"Example",id:"example-7",level:3},{value:"Parameters",id:"parameters-7",level:3},{value:"Return type",id:"return-type-7",level:3},{value:"Authorization",id:"authorization-7",level:3},{value:"HTTP request headers",id:"http-request-headers-7",level:3},{value:"Example",id:"example-8",level:3},{value:"Parameters",id:"parameters-8",level:3},{value:"Return type",id:"return-type-8",level:3},{value:"Authorization",id:"authorization-8",level:3},{value:"HTTP request headers",id:"http-request-headers-8",level:3},{value:"Example",id:"example-9",level:3},{value:"Parameters",id:"parameters-9",level:3},{value:"Return type",id:"return-type-9",level:3},{value:"Authorization",id:"authorization-9",level:3},{value:"HTTP request headers",id:"http-request-headers-9",level:3},{value:"Example",id:"example-10",level:3},{value:"Parameters",id:"parameters-10",level:3},{value:"Return type",id:"return-type-10",level:3},{value:"Authorization",id:"authorization-10",level:3},{value:"HTTP request headers",id:"http-request-headers-10",level:3},{value:"Example",id:"example-11",level:3},{value:"Parameters",id:"parameters-11",level:3},{value:"Return type",id:"return-type-11",level:3},{value:"Authorization",id:"authorization-11",level:3},{value:"HTTP request headers",id:"http-request-headers-11",level:3},{value:"Example",id:"example-12",level:3},{value:"Parameters",id:"parameters-12",level:3},{value:"Return type",id:"return-type-12",level:3},{value:"Authorization",id:"authorization-12",level:3},{value:"HTTP request headers",id:"http-request-headers-12",level:3},{value:"Example",id:"example-13",level:3},{value:"Parameters",id:"parameters-13",level:3},{value:"Return type",id:"return-type-13",level:3},{value:"Authorization",id:"authorization-13",level:3},{value:"HTTP request headers",id:"http-request-headers-13",level:3},{value:"Example",id:"example-14",level:3},{value:"Parameters",id:"parameters-14",level:3},{value:"Return type",id:"return-type-14",level:3},{value:"Authorization",id:"authorization-14",level:3},{value:"HTTP request headers",id:"http-request-headers-14",level:3},{value:"Example",id:"example-15",level:3},{value:"Parameters",id:"parameters-15",level:3},{value:"Return type",id:"return-type-15",level:3},{value:"Authorization",id:"authorization-15",level:3},{value:"HTTP request headers",id:"http-request-headers-15",level:3},{value:"Example",id:"example-16",level:3},{value:"Parameters",id:"parameters-16",level:3},{value:"Return type",id:"return-type-16",level:3},{value:"Authorization",id:"authorization-16",level:3},{value:"HTTP request headers",id:"http-request-headers-16",level:3}],d={toc:u};function s(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"swaggerclientcontentapi"},"SwaggerClient::ContentApi"),(0,r.kt)("p",null,"All URIs are relative to ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://api.estuary.tech"},"https://api.estuary.tech"))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"HTTP request"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_add_car_post"},(0,r.kt)("strong",{parentName:"a"},"content_add_car_post"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"POST")," /content/add-car"),(0,r.kt)("td",{parentName:"tr",align:null},"Add Car object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_add_ipfs_post"},(0,r.kt)("strong",{parentName:"a"},"content_add_ipfs_post"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"POST")," /content/add-ipfs"),(0,r.kt)("td",{parentName:"tr",align:null},"Add IPFS object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_add_post"},(0,r.kt)("strong",{parentName:"a"},"content_add_post"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"POST")," /content/add"),(0,r.kt)("td",{parentName:"tr",align:null},"Add new content")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_aggregated_content_get"},(0,r.kt)("strong",{parentName:"a"},"content_aggregated_content_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/aggregated/{content}"),(0,r.kt)("td",{parentName:"tr",align:null},"Get aggregated content stats")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_all_deals_get"},(0,r.kt)("strong",{parentName:"a"},"content_all_deals_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/all-deals"),(0,r.kt)("td",{parentName:"tr",align:null},"Get all deals for a user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_bw_usage_content_get"},(0,r.kt)("strong",{parentName:"a"},"content_bw_usage_content_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/bw-usage/{content}"),(0,r.kt)("td",{parentName:"tr",align:null},"Get content bandwidth")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_create_post"},(0,r.kt)("strong",{parentName:"a"},"content_create_post"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"POST")," /content/create"),(0,r.kt)("td",{parentName:"tr",align:null},"Add a new content")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_deals_get"},(0,r.kt)("strong",{parentName:"a"},"content_deals_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/deals"),(0,r.kt)("td",{parentName:"tr",align:null},"Content with deals")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_ensure_replication_datacid_get"},(0,r.kt)("strong",{parentName:"a"},"content_ensure_replication_datacid_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/ensure-replication/{datacid}"),(0,r.kt)("td",{parentName:"tr",align:null},"Ensure Replication")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_failures_content_get"},(0,r.kt)("strong",{parentName:"a"},"content_failures_content_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/failures/{content}"),(0,r.kt)("td",{parentName:"tr",align:null},"List all failures for a content")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_id_get"},(0,r.kt)("strong",{parentName:"a"},"content_id_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/{id}"),(0,r.kt)("td",{parentName:"tr",align:null},"Content")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_importdeal_post"},(0,r.kt)("strong",{parentName:"a"},"content_importdeal_post"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"POST")," /content/importdeal"),(0,r.kt)("td",{parentName:"tr",align:null},"Import a deal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_list_get"},(0,r.kt)("strong",{parentName:"a"},"content_list_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/list"),(0,r.kt)("td",{parentName:"tr",align:null},"List all pinned content")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_read_cont_get"},(0,r.kt)("strong",{parentName:"a"},"content_read_cont_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/read/{cont}"),(0,r.kt)("td",{parentName:"tr",align:null},"Read content")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_staging_zones_get"},(0,r.kt)("strong",{parentName:"a"},"content_staging_zones_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/staging-zones"),(0,r.kt)("td",{parentName:"tr",align:null},"Get staging zone for user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_stats_get"},(0,r.kt)("strong",{parentName:"a"},"content_stats_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/stats"),(0,r.kt)("td",{parentName:"tr",align:null},"Get content statistics")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/ContentApi#content_status_id_get"},(0,r.kt)("strong",{parentName:"a"},"content_status_id_get"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"GET")," /content/status/{id}"),(0,r.kt)("td",{parentName:"tr",align:null},"Content Status")))),(0,r.kt)("h1",{id:"content_add_car_post"},(0,r.kt)("strong",{parentName:"h1"},"content_add_car_post")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_add_car_post(body, opts)")),(0,r.kt)("p",null,"Add Car object"),(0,r.kt)("p",null,"This endpoint is used to add a car object to the network. The object can be a file or a directory."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nbody = 'body_example' # String | Car\n\nopts = { \n  ignore_dupes: 'ignore_dupes_example', # String | Ignore Dupes\n  filename: 'filename_example' # String | Filename\n}\n\nbegin\n  #Add Car object\n  api_instance.content_add_car_post(body, opts)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_add_car_post: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"body")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Car"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"ignore_dupes")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Ignore Dupes"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"filename")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Filename"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")))),(0,r.kt)("h3",{id:"return-type"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_add_ipfs_post"},(0,r.kt)("strong",{parentName:"h1"},"content_add_ipfs_post")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_add_ipfs_post(body, opts)")),(0,r.kt)("p",null,"Add IPFS object"),(0,r.kt)("p",null,"This endpoint is used to add an IPFS object to the network. The object can be a file or a directory."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nbody = SwaggerClient::UtilContentAddIpfsBody.new # UtilContentAddIpfsBody | IPFS Body\n\nopts = { \n  ignore_dupes: 'ignore_dupes_example' # String | Ignore Dupes\n}\n\nbegin\n  #Add IPFS object\n  api_instance.content_add_ipfs_post(body, opts)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_add_ipfs_post: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"body")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/UtilContentAddIpfsBody"},(0,r.kt)("strong",{parentName:"a"},"UtilContentAddIpfsBody"))),(0,r.kt)("td",{parentName:"tr",align:null},"IPFS Body"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"ignore_dupes")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Ignore Dupes"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")))),(0,r.kt)("h3",{id:"return-type-1"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-1"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-1"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_add_post"},(0,r.kt)("strong",{parentName:"h1"},"content_add_post")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"UtilContentAddResponse content_add_post(data, opts)")),(0,r.kt)("p",null,"Add new content"),(0,r.kt)("p",null,"This endpoint is used to upload new content."),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\ndata = File.new('/path/to/file.txt') # File | File to upload\n\nopts = { \n  filename: 'filename_example', # String | Filenam to use for upload\n  coluuid: 'coluuid_example', # String | Collection UUID\n  replication: 56, # Integer | Replication value\n  ignore_dupes: 'ignore_dupes_example', # String | Ignore Dupes true/false\n  lazy_provide: 'lazy_provide_example', # String | Lazy Provide true/false\n  dir: 'dir_example' # String | Directory\n}\n\nbegin\n  #Add new content\n  result = api_instance.content_add_post(data, opts)\n  p result\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_add_post: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"File")),(0,r.kt)("td",{parentName:"tr",align:null},"File to upload"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"filename")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Filenam to use for upload"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"coluuid")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Collection UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"replication")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Integer")),(0,r.kt)("td",{parentName:"tr",align:null},"Replication value"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"ignore_dupes")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Ignore Dupes true/false"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"lazy_provide")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Lazy Provide true/false"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dir")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Directory"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")))),(0,r.kt)("h3",{id:"return-type-2"},"Return type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/docs/UtilContentAddResponse"},(0,r.kt)("strong",{parentName:"a"},"UtilContentAddResponse"))),(0,r.kt)("h3",{id:"authorization-2"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-2"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": multipart/form-data"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_aggregated_content_get"},(0,r.kt)("strong",{parentName:"h1"},"content_aggregated_content_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"String content_aggregated_content_get(content)")),(0,r.kt)("p",null,"Get aggregated content stats"),(0,r.kt)("p",null,"This endpoint returns aggregated content stats"),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\ncontent = 'content_example' # String | Content ID\n\n\nbegin\n  #Get aggregated content stats\n  result = api_instance.content_aggregated_content_get(content)\n  p result\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_aggregated_content_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"content")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Content ID"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-3"},"Return type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"String")),(0,r.kt)("h3",{id:"authorization-3"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-3"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_all_deals_get"},(0,r.kt)("strong",{parentName:"h1"},"content_all_deals_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_all_deals_get(_begin, duration, all)")),(0,r.kt)("p",null,"Get all deals for a user"),(0,r.kt)("p",null,"This endpoint is used to get all deals for a user"),(0,r.kt)("h3",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\n_begin = '_begin_example' # String | Begin\n\nduration = 'duration_example' # String | Duration\n\nall = 'all_example' # String | All\n\n\nbegin\n  #Get all deals for a user\n  api_instance.content_all_deals_get(_begin, duration, all)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_all_deals_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"_begin")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Begin"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"duration")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Duration"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"all")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"All"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-4"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-4"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-4"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_bw_usage_content_get"},(0,r.kt)("strong",{parentName:"h1"},"content_bw_usage_content_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_bw_usage_content_get(content)")),(0,r.kt)("p",null,"Get content bandwidth"),(0,r.kt)("p",null,"This endpoint returns content bandwidth"),(0,r.kt)("h3",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\ncontent = 'content_example' # String | Content ID\n\n\nbegin\n  #Get content bandwidth\n  api_instance.content_bw_usage_content_get(content)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_bw_usage_content_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"content")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Content ID"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-5"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-5"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-5"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_create_post"},(0,r.kt)("strong",{parentName:"h1"},"content_create_post")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_create_post(req, opts)")),(0,r.kt)("p",null,"Add a new content"),(0,r.kt)("p",null,"This endpoint adds a new content"),(0,r.kt)("h3",{id:"example-6"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nreq = SwaggerClient::UtilContentCreateBody.new # UtilContentCreateBody | Content\n\nopts = { \n  ignore_dupes: 'ignore_dupes_example' # String | Ignore Dupes\n}\n\nbegin\n  #Add a new content\n  api_instance.content_create_post(req, opts)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_create_post: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"req")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/UtilContentCreateBody"},(0,r.kt)("strong",{parentName:"a"},"UtilContentCreateBody"))),(0,r.kt)("td",{parentName:"tr",align:null},"Content"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"ignore_dupes")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Ignore Dupes"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")))),(0,r.kt)("h3",{id:"return-type-6"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-6"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-6"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_deals_get"},(0,r.kt)("strong",{parentName:"h1"},"content_deals_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_deals_get(opts)")),(0,r.kt)("p",null,"Content with deals"),(0,r.kt)("p",null,"This endpoint lists all content with deals"),(0,r.kt)("h3",{id:"example-7"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nopts = { \n  limit: 56, # Integer | Limit\n  offset: 56 # Integer | Offset\n}\n\nbegin\n  #Content with deals\n  api_instance.content_deals_get(opts)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_deals_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"limit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Integer")),(0,r.kt)("td",{parentName:"tr",align:null},"Limit"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"offset")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Integer")),(0,r.kt)("td",{parentName:"tr",align:null},"Offset"),(0,r.kt)("td",{parentName:"tr",align:null},"[optional]")))),(0,r.kt)("h3",{id:"return-type-7"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-7"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-7"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_ensure_replication_datacid_get"},(0,r.kt)("strong",{parentName:"h1"},"content_ensure_replication_datacid_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_ensure_replication_datacid_get(datacid)")),(0,r.kt)("p",null,"Ensure Replication"),(0,r.kt)("p",null,"This endpoint ensures that the content is replicated to the specified number of providers"),(0,r.kt)("h3",{id:"example-8"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\ndatacid = 'datacid_example' # String | Data CID\n\n\nbegin\n  #Ensure Replication\n  api_instance.content_ensure_replication_datacid_get(datacid)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_ensure_replication_datacid_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"datacid")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Data CID"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-8"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-8"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-8"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_failures_content_get"},(0,r.kt)("strong",{parentName:"h1"},"content_failures_content_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"String content_failures_content_get(content)")),(0,r.kt)("p",null,"List all failures for a content"),(0,r.kt)("p",null,"This endpoint returns all failures for a content"),(0,r.kt)("h3",{id:"example-9"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\ncontent = 'content_example' # String | Content ID\n\n\nbegin\n  #List all failures for a content\n  result = api_instance.content_failures_content_get(content)\n  p result\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_failures_content_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"content")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Content ID"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-9"},"Return type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"String")),(0,r.kt)("h3",{id:"authorization-9"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-9"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_id_get"},(0,r.kt)("strong",{parentName:"h1"},"content_id_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_id_get(id)")),(0,r.kt)("p",null,"Content"),(0,r.kt)("p",null,"This endpoint returns a content by its ID"),(0,r.kt)("h3",{id:"example-10"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nid = 56 # Integer | Content ID\n\n\nbegin\n  #Content\n  api_instance.content_id_get(id)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_id_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Integer")),(0,r.kt)("td",{parentName:"tr",align:null},"Content ID"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-10"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-10"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-10"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_importdeal_post"},(0,r.kt)("strong",{parentName:"h1"},"content_importdeal_post")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_importdeal_post(body)")),(0,r.kt)("p",null,"Import a deal"),(0,r.kt)("p",null,"This endpoint imports a deal into the shuttle."),(0,r.kt)("h3",{id:"example-11"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nbody = SwaggerClient::MainImportDealBody.new # MainImportDealBody | Import a deal\n\n\nbegin\n  #Import a deal\n  api_instance.content_importdeal_post(body)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_importdeal_post: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"body")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/estuary-documentation/clients/ruby/docs/MainImportDealBody"},(0,r.kt)("strong",{parentName:"a"},"MainImportDealBody"))),(0,r.kt)("td",{parentName:"tr",align:null},"Import a deal"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-11"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-11"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-11"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_list_get"},(0,r.kt)("strong",{parentName:"h1"},"content_list_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Array","<","String",">"," content_list_get")),(0,r.kt)("p",null,"List all pinned content"),(0,r.kt)("p",null,"This endpoint lists all content"),(0,r.kt)("h3",{id:"example-12"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nbegin\n  #List all pinned content\n  result = api_instance.content_list_get\n  p result\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_list_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-12"},"Parameters"),(0,r.kt)("p",null,"This endpoint does not need any parameter."),(0,r.kt)("h3",{id:"return-type-12"},"Return type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Array","<","String",">")),(0,r.kt)("h3",{id:"authorization-12"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-12"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_read_cont_get"},(0,r.kt)("strong",{parentName:"h1"},"content_read_cont_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_read_cont_get(cont)")),(0,r.kt)("p",null,"Read content"),(0,r.kt)("p",null,"This endpoint reads content from the blockstore"),(0,r.kt)("h3",{id:"example-13"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\ncont = 'cont_example' # String | CID\n\n\nbegin\n  #Read content\n  api_instance.content_read_cont_get(cont)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_read_cont_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"cont")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"CID"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-13"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-13"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-13"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_staging_zones_get"},(0,r.kt)("strong",{parentName:"h1"},"content_staging_zones_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_staging_zones_get")),(0,r.kt)("p",null,"Get staging zone for user"),(0,r.kt)("p",null,"This endpoint is used to get staging zone for user."),(0,r.kt)("h3",{id:"example-14"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nbegin\n  #Get staging zone for user\n  api_instance.content_staging_zones_get\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_staging_zones_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-14"},"Parameters"),(0,r.kt)("p",null,"This endpoint does not need any parameter."),(0,r.kt)("h3",{id:"return-type-14"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-14"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-14"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_stats_get"},(0,r.kt)("strong",{parentName:"h1"},"content_stats_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_stats_get(limit, offset)")),(0,r.kt)("p",null,"Get content statistics"),(0,r.kt)("p",null,"This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten"),(0,r.kt)("h3",{id:"example-15"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nlimit = 'limit_example' # String | limit\n\noffset = 'offset_example' # String | offset\n\n\nbegin\n  #Get content statistics\n  api_instance.content_stats_get(limit, offset)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_stats_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"limit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"limit"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"offset")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"offset"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-15"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-15"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-15"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")),(0,r.kt)("h1",{id:"content_status_id_get"},(0,r.kt)("strong",{parentName:"h1"},"content_status_id_get")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"content_status_id_get(id)")),(0,r.kt)("p",null,"Content Status"),(0,r.kt)("p",null,"This endpoint returns the status of a content"),(0,r.kt)("h3",{id:"example-16"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# load the gem\nrequire 'swagger_client'\n# setup authorization\nSwaggerClient.configure do |config|\n  # Configure API key authorization: bearerAuth\n  config.api_key['Authorization'] = 'YOUR API KEY'\n  # Uncomment the following line to set a prefix for the API key, e.g. 'Bearer' (defaults to nil)\n  #config.api_key_prefix['Authorization'] = 'Bearer'\nend\n\napi_instance = SwaggerClient::ContentApi.new\n\nid = 56 # Integer | Content ID\n\n\nbegin\n  #Content Status\n  api_instance.content_status_id_get(id)\nrescue SwaggerClient::ApiError => e\n  puts \"Exception when calling ContentApi->content_status_id_get: #{e}\"\nend\n")),(0,r.kt)("h3",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Integer")),(0,r.kt)("td",{parentName:"tr",align:null},"Content ID"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"return-type-16"},"Return type"),(0,r.kt)("p",null,"nil (empty response body)"),(0,r.kt)("h3",{id:"authorization-16"},"Authorization"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/estuary-documentation/clients/ruby/#bearerAuth"},"bearerAuth")),(0,r.kt)("h3",{id:"http-request-headers-16"},"HTTP request headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Content-Type"),": Not defined"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Accept"),": application/json")))}s.isMDXComponent=!0}}]);